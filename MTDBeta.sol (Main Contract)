pragma solidity ^0.4.19;

/// The process of buying and selling residential real estate is populated by large 
/// amounts of paperwork and sometimes that turns out to be a little complicated to 
/// fully understand at a glance. To better communicate how we envision transactions 
/// in the absence of paper, we've imagined how an autonomous lands registry could handle 
/// property transfers once the Great Trek to Mars begins ðŸš€ 
/// In this release we are looking for consistency in how title deed transfers are achieved
/// today, only difference being there is nolonger a large amount of paperwork besides the
/// primary title deeds kept by the deeds office which corresponds to the digital copy.
/// Think of it as a perfectly curated gold backed standard dollar, where the digital copy
/// resembles paper money in circulation and at any point in time can be redeemed for paper
/// title deeds.
/// In this setting, one can only claim rights to a house if they have been allocated a 
/// hut by the autonomous lands registry or through acquisitions from other market participants
/// through the marketpalce. Once someone owns a hut, by default, they will hold claims on 
/// everything else housed inside the hut including built property.
/// Inside the "hut", most pleasures enjoyed on earth will come to life. 
/// However each hut can only be owned by one entity at any point in time. In many ways,
/// a hut resembles a title deed on earth.Here we examine a standard for transferring ownership 
/// of properties which could be adopted to facillitate more efficient transfers of properties
/// without relying on any 3rd parties to mediate the transaction and thereby solving the double 
/// spending problem in real estate transactions by adopting the ERC721 Standard.
/// In practice, the beta we have set out could possibly establish a market fit properties which
///  are sold through sole mandates, which means the property can only be listed with one property
/// broker and all information regarding the the sale of that property must be derived from a single
/// source. In this manner, instead of receiving a pre-determined percentage on the outcome of the 
/// sale, they instead charge a set fee upfront to the seller to allow a property listing on
/// our dApp. Thereafter, title attorneys observe the public ledger for any transfers and effect 
/// those changes against the corresponding title registriries books.


contract Ownable {
  address public owner;
  
  function Ownable() {
    owner = msg.sender;
  }
  
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }
 
  function transferOwnership(address newOwner) onlyOwner {
    if (newOwner != address(0)) {
      owner = newOwner;
    }
  }

}

contract ERC721 {
    
    function totalSupply() public view returns (uint256 total);
    function balanceOf(address _owner) public view returns (uint256 balance);
    function ownerOf(uint256 _tokenId) external view returns (address owner);
    function approve(address _to, uint256 _tokenId) external;
    function transfer(address _to, uint256 _tokenId) external;
    function transferFrom(address _from, address _to, uint256 _tokenId) external;

    
    event Transfer(address from, address to, uint256 tokenId);
    event Approval(address owner, address approved, uint256 tokenId);

    function supportsInterface(bytes4 _interfaceID) external view returns (bool);
}

contract HutRegistry {
    
    event Construction(address owner, uint256 hutId, uint256 standNumber);
    event Transfer(address from, address to, uint256 hutId);


    struct Hut {
        uint256 standNumber;
        uint64 constructionTime;
        string circumference;
        string coutry;
        string bedrooms;
        string bathrooms;
    }

 
    Hut [] public huts;

    mapping (uint256 => address) public hutIndexToOwner;
    mapping (address => uint256) ownershipTokenCount;
    mapping (uint256 => address) public hutIndexToApproved;
   string public url = "http://example.com/";

    function _transfer(address _from, address _to, uint256 _tokenId) internal {
        ownershipTokenCount[_to]++;
        hutIndexToOwner[_tokenId] = _to;
        
        if (_from != address(0)) {
            ownershipTokenCount[_from]--;
            delete hutIndexToApproved [_tokenId];
        }
       
        Transfer(_from, _to, _tokenId);
    }

    function _createHut(
        uint256 _standNumber,
        address _owner,
        string  _circumference,
        string _country,
        string _bedrooms,
        string _bathrooms
    )
        public
        returns (uint)
        
    {}

        Hut public _hut = hut({
            constructionTime: uint64(now),
            standNumber: uint256(_standNumber),
            circumference: string(_circumference),
            country: string(_country),
            bedrooms: string(_bedrooms),
            bathrooms: string(_bathrooms)
        });
        uint256 newhutId = huts.push(_hut) - 1;

        Construction(
            _owner,
            newhutId,
            uint256(_hut.standNumber),
            _hut.circumference,
            _hut.country,
            _hut.bedrooms,
            _hut.bathroomms
        );

        _transfer(0, _owner, newhutId);

        return newhutId;
    }

}

contract ERC721Metadata {

    function name() public pure returns (string _name);

    function symbol() public pure returns (string _symbol);

    function hutUri(uint256 _hutId) external view returns (string _hutUri);
}


contract HutOwnership is HutRegistry, ERC721 {

	
    string public constant name = "MarsTitleDeed";
    string public constant symbol = "MTD";

    ERC721Metadata public erc721Metadata;

    bytes4 constant InterfaceSignature_ERC165 =
        bytes4(keccak256('supportsInterface(bytes4)'));

    bytes4 constant InterfaceSignature_ERC721 =
        bytes4(keccak256('name()')) ^
        bytes4(keccak256('symbol()')) ^
        bytes4(keccak256('totalSupply()')) ^
        bytes4(keccak256('balanceOf(address)')) ^
        bytes4(keccak256('ownerOf(uint256)')) ^
        bytes4(keccak256('approve(address,uint256)')) ^
        bytes4(keccak256('transfer(address,uint256)')) ^
        bytes4(keccak256('transferFrom(address,address,uint256)')) ^
        bytes4(keccak256('tokensOfOwner(address)')) ^
        bytes4(keccak256('tokenMetadata(uint256,string)'));


    function supportsInterface(bytes4 _interfaceID) external view returns (bool)
    {
        // DEBUG ONLY
        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));

        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));
    }

   
    function setMetadataAddress(address _contractAddress) public onlyOwner {
        erc721Metadata = ERC721Metadata(_contractAddress);
    }

    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {
        return hutIndexToOwner[_tokenId] == _claimant;
    }

    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {
        return hutIndexToApproved[_tokenId] == _claimant;
    }

  
    function _approve(uint256 _tokenId, address _approved) internal {
        hutIndexToApproved[_tokenId] = _approved;
    }

    function balanceOf(address _owner) public view returns (uint256 count) {
        return ownershipTokenCount[_owner];
    }

    function transfer(
        address _to,
        uint256 _tokenId
    )
        external
    {
       
        require(_to != address(0));
        require(_to != address(this));
        require(_to != address(MarketplaceAuction));
        

        require(_owns(msg.sender, _tokenId));

        _transfer(msg.sender, _to, _tokenId);
    }

    function approve(
        address _to,
        uint256 _tokenId
    )
        external
    {
 
        require(_owns(msg.sender, _tokenId));
        _approve(_tokenId, _to);
        Approval(msg.sender, _to, _tokenId);
    }

    function transferFrom(
        address _from,
        address _to,
        uint256 _tokenId
    )
        external
    {
        
        require(_to != address(0));
        require(_to != address(this));
        require(_approvedFor(msg.sender, _tokenId));
        require(_owns(_from, _tokenId));

        
        _transfer(_from, _to, _tokenId);
    }

    
    function totalSupply() public view returns (uint) {
        return huts.length - 1;
    }

    function ownerOf(uint256 _tokenId)
        external
        view
        returns (address owner)
    {
        owner = hutIndexToOwner[_tokenId];

        require(owner != address(0));
    }

    
    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {
        uint256 tokenCount = balanceOf(_owner);

        if (tokenCount == 0) {
            return new uint256[](0);
        } else {
            uint256[] memory result = new uint256[](tokenCount);
            uint256 totalDeed = totalSupply();
            uint256 resultIndex = 0;

            return result;
        }
    }

    /// @dev Adapted from memcpy() by @arachnid (Nick Johnson <arachnid@notdot.net>)
    ///  This method is licenced under the Apache License.
    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol
    function _memcpy(uint _dest, uint _src, uint _len) private view {
        // Copy word-length chunks while possible
        for(; _len >= 32; _len -= 32) {
            assembly {
                mstore(_dest, mload(_src))
            }
            _dest += 32;
            _src += 32;
        }

        // Copy remaining bytes
        uint256 mask = 256 ** (32 - _len) - 1;
        assembly {
            let srcpart := and(mload(_src), not(mask))
            let destpart := and(mload(_dest), mask)
            mstore(_dest, or(destpart, srcpart))
        }
    }

    /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson <arachnid@notdot.net>)
    ///  This method is licenced under the Apache License.
    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol
    function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private view returns (string) {
        var outputString = new string(_stringLength);
        uint256 outputPtr;
        uint256 bytesPtr;

        assembly {
            outputPtr := add(outputString, 32)
            bytesPtr := _rawBytes
        }

        _memcpy(outputPtr, bytesPtr, _stringLength);

        return outputString;
    }

    function tokenMetadata(uint256 _tokenId, string _preferredTransport) external view returns (string infoUrl) {
        require(erc721Metadata != address(0));
        bytes32[4] memory buffer;
        uint256 count;
        (buffer, count) = erc721Metadata.getMetadata(_tokenId, _preferredTransport);

        return _toString(buffer, count);
    }
}

contract Pausable is Ownable {
  event Pause();
  event Unpause();

  bool public paused = false;
  
  modifier whenNotPaused() {
    require(!paused);
    _;
  }

  modifier whenPaused {
    require(paused);
    _;
  }

  function pause() onlyOwner whenNotPaused returns (bool) {
    paused = true;
    Pause();
    return true;
  }

  function unpause() onlyOwner whenPaused returns (bool) {
    paused = false;
    Unpause();
    return true;
  }
}


contract MarketplaceAuction is Pausable, {

 
    struct Auction {
       
        address seller;
        uint128 startingPrice;
        uint128 endingPrice;
        uint64 duration
        uint64 startedAt;
    }

    ERC721 public nonFungibleContract;

    uint256 public ownerCut;

    mapping (uint256 => Auction) tokenIdToAuction;

    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);
    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);
    event AuctionCancelled(uint256 tokenId);

    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {
        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);
    }

    function _escrow(address _owner, uint256 _tokenId) internal {
        
        nonFungibleContract.transferFrom(_owner, this, _tokenId);
    }

 
    function _transfer(address _receiver, uint256 _tokenId) internal {
        
        nonFungibleContract.transfer(_receiver, _tokenId);
    }

    function _addAuction(uint256 _tokenId, Auction _auction) internal {
        require(_auction.duration >= 1 minutes);
        tokenIdToAuction[_tokenId] = _auction;

        AuctionCreated(
            uint256(_tokenId),
            uint256(_auction.startingPrice),
            uint256(_auction.endingPrice),
            uint256(_auction.duration)
        );
    }

    function _cancelAuction(uint256 _tokenId, address _seller) internal {
        _removeAuction(_tokenId);
        _transfer(_seller, _tokenId);
        AuctionCancelled(_tokenId);
    }

   
    function _bid(uint256 _tokenId, uint256 _bidAmount)
        internal
        returns (uint256)
    {
        Auction storage auction = tokenIdToAuction[_tokenId];

        require(_isOnAuction(auction));

        uint256 price = _currentPrice(auction);
        require(_bidAmount >= price);

        address seller = auction.seller;

        _removeAuction(_tokenId);
        
        if (price > 0) {
            uint256 auctioneerCut = _computeCut(price);
            uint256 sellerProceeds = price - auctioneerCut;
            seller.transfer(sellerProceeds);
        }

        uint256 bidExcess = _bidAmount - price;

        msg.sender.transfer(bidExcess);

        AuctionSuccessful(_tokenId, price, msg.sender);

        return price;
    }

    function _removeAuction(uint256 _tokenId) internal {
        delete tokenIdToAuction[_tokenId];
    }

    function _isOnAuction(Auction storage _auction) internal view returns (bool) {
        return (_auction.startedAt > 0);
    }

    function _currentPrice(Auction storage _auction)
        internal
        view
        returns (uint256)
    {
        uint256 secondsPassed = 0;

        if (now > _auction.startedAt) {
            secondsPassed = now - _auction.startedAt;
        }

        return _computeCurrentPrice(
            _auction.startingPrice,
            _auction.endingPrice,
            _auction.duration,
            secondsPassed
        );
    }

    function _computeCurrentPrice(
        uint256 _startingPrice,
        uint256 _endingPrice,
        uint256 _duration,
        uint256 _secondsPassed
    )
        internal
        pure
        returns (uint256)
    {
       
        if (_secondsPassed >= _duration) {
            
            return _endingPrice;
        } else {
            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);

            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);

            int256 currentPrice = int256(_startingPrice) + currentPriceChange;

            return uint256(currentPrice);
        }
    }

   
    function _computeCut(uint256 _price) internal view returns (uint256) {
       
        return _price * ownerCut / 10000;
    }


function() external payable {
        require(
            msg.sender == address(MarketplaceAuction)
        );
    }
	
}
